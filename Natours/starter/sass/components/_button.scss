.btn {
  &, // add btn element itself
  /* button is a link, so it has link's pseudo selectors */
  &:link,
  &:visited {
    text-transform: uppercase;
    text-decoration: none;
    font-size: $default-font-size;
    padding: 1.5rem 4rem;
    /* need to be a block if we want to give inline element padding, height, width */
    display: inline-block;
    /* to center inline-block elements (they are treated as text) add text-align to the parent element*/

    /* make button with rounded edges */
    border-radius: 10rem;

    /* use transition to animate. Use all properties for animation */
    /* transition property must be on the initial state, not on pseudo classes where it is visible */
    transition: all 0.2s;

    /* set position relative to hide the btn::after element */
    position: relative;

    // change for the <button> element
    border: none;
    cursor: pointer;
  }

  &:hover {
    /* to move the button up (negative value) */
    transform: translateY(-3px);

    /* first arg is X, the second is Y, the third is blur value, fourth - color of the shadow and its opacity */
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

    &::after {
      /* when we hover the button, we want to do something with the clone button behind */
      /* after we hover the button increase the size ::after The blown out size is the pseudo element
         that we hid behind the button*/
      /* transform: scale(1.5); */
      transform: scaleX(1.4) scaleY(1.6);

      opacity: 0;
    }
  }

  &:active,
  &:focus {
    /* when we click an element, it becomes active.
       Move the element up 1px from initial position before any actions (0)
  */
    outline: none;
    transform: translateY(-0.1rem);

    /* when we click on the button we want the shadow to look smaller and less blured*/
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    /* make the copied pseudo element white */
    &::after {
      background-color: $color-white;
    }
  }

  &--green {
    background-color: $color-primary;
    color: $color-white;

    /* make the copied pseudo element with primary color */
    &::after {
      background-color: $color-primary;
    }
  }

  /* after pseudo element is treated as a child of the button */
  &::after {
    /* create a copy of the button and put it behind the button.
    When we hover out of the button, ... */

    /* in order for after pseudo element to appear on the page, we must have content property. */
    content: "";
    display: inline-block;
    /* 100% of the height and width of the button.  */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* put the pseudo button right behind the main button, so it won't stick out. The parent should the .btn:link */
    position: absolute;
    top: 0;
    left: 0;

    /* really hide the button behind by setting z-index. Without it will appear in the front */
    z-index: -1;

    /* animate the button blow out. set time. Animation is always set on the original element,
  which is ::after for the second button */
    transition: all 0.4s;
  }

  &--animated {
    /* .75s - delay */
    animation: moveInBottom 0.5s ease-out 0.75s;

    /* @keyframe %0 styles will be applied to the animation before it starts */
    animation-fill-mode: backwards;
  }
}

.btn-text {
  &:link,
  &:visited {
    font-size: $default-font-size;
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid $color-primary;
    padding: 3px;
    transition: all 0.2s;
  }

  &:hover {
    background-color: $color-primary;
    color: $color-white;
    // x, y, blur, color
    box-shadow: 0 1rem 2rem rgba($color-black, 0.15);
    /* to move the button up (negative value) */
    transform: translateY(-2px);
  }

  &:active {
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.15);
    transform: translateY(0);
  }
}
